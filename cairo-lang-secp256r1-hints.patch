diff --git a/src/starkware/cairo/common/cairo_secp/secp256r1_utils.py b/src/starkware/cairo/common/cairo_secp/secp256r1_utils.py
new file mode 100644
index 0000000..8bb5107
--- /dev/null
+++ b/src/starkware/cairo/common/cairo_secp/secp256r1_utils.py
@@ -0,0 +1,3 @@
+SECP256R1_P = 2**256 - 2**224 + 2**192 + 2**96 - 1
+SECP256R1_N = 0xFFFFFFFF00000000FFFFFFFFFFFFFFFFBCE6FAADA7179E84F3B9CAC2FC632551
+SECP256R1_ALPHA = 0xFFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFC
diff --git a/src/starkware/starknet/security/whitelists/cairo_secp.json b/src/starkware/starknet/security/whitelists/cairo_secp.json
index ac77942..5524324 100644
--- a/src/starkware/starknet/security/whitelists/cairo_secp.json
+++ b/src/starkware/starknet/security/whitelists/cairo_secp.json
@@ -1,5 +1,139 @@
 {
     "allowed_reference_expressions_for_hint": [
+        {
+            "allowed_expressions": [],
+            "hint_lines": [
+                "ids.quad_bit = (",
+                "    8 * ((ids.scalar_v >> ids.m) & 1)",
+                "    + 4 * ((ids.scalar_u >> ids.m) & 1)",
+                "    + 2 * ((ids.scalar_v >> (ids.m - 1)) & 1)",
+                "    + ((ids.scalar_u >> (ids.m - 1)) & 1)",
+                ")"
+            ]
+        },
+        {
+            "allowed_expressions": [],
+            "hint_lines": [
+                "ids.len_hi = max(ids.scalar_u.d2.bit_length(), ids.scalar_v.d2.bit_length())-1"
+            ]
+        },
+        {
+            "allowed_expressions": [],
+            "hint_lines": [
+                "ids.dibit = ((ids.scalar_u >> ids.m) & 1) + 2 * ((ids.scalar_v >> ids.m) & 1)"
+            ]
+        },
+        {
+            "allowed_expressions": [],
+            "hint_lines": [
+                "from starkware.cairo.common.cairo_secp.secp256r1_utils import SECP256R1_P as SECP_P"
+            ]
+        },
+        {
+            "allowed_expressions": [],
+            "hint_lines": [
+                "from starkware.cairo.common.cairo_secp.secp256r1_utils import SECP256R1_ALPHA as ALPHA"
+            ]
+        },
+        {
+            "allowed_expressions": [],
+            "hint_lines": [
+                "from starkware.cairo.common.cairo_secp.secp256r1_utils import SECP256R1_N as N"
+            ]
+        },
+        {
+            "allowed_expressions": [],
+            "hint_lines": [
+                "from starkware.cairo.common.cairo_secp.secp_utils import pack",
+                "from starkware.python.math_utils import ec_double_slope",
+                "",
+                "# Compute the slope.",
+                "x = pack(ids.point.x, PRIME)",
+                "y = pack(ids.point.y, PRIME)",
+                "value = slope = ec_double_slope(point=(x, y), alpha=ALPHA, p=SECP_P)"
+            ]
+        },
+        {
+            "allowed_expressions": [],
+            "hint_lines": [
+                "from starkware.cairo.common.cairo_secp.secp_utils import pack",
+                "from starkware.python.math_utils import line_slope",
+                "",
+                "# Compute the slope.",
+                "x0 = pack(ids.point0.x, PRIME)",
+                "y0 = pack(ids.point0.y, PRIME)",
+                "x1 = pack(ids.point1.x, PRIME)",
+                "y1 = pack(ids.point1.y, PRIME)",
+                "value = slope = line_slope(point1=(x0, y0), point2=(x1, y1), p=SECP_P)"
+            ]
+        },
+        {
+            "allowed_expressions": [],
+            "hint_lines": [
+                "from starkware.cairo.common.cairo_secp.secp_utils import pack",
+                "",
+                "slope = pack(ids.slope, PRIME)",
+                "x0 = pack(ids.point0.x, PRIME)",
+                "x1 = pack(ids.point1.x, PRIME)",
+                "y0 = pack(ids.point0.y, PRIME)",
+                "",
+                "value = new_x = (pow(slope, 2, SECP_P) - x0 - x1) % SECP_P"
+            ]
+        },
+        {
+            "allowed_expressions": [],
+            "hint_lines": [
+                "from starkware.cairo.common.cairo_secp.secp_utils import pack",
+                "x = pack(ids.x, PRIME) % SECP_P"
+            ]
+        },
+        {
+            "allowed_expressions": [],
+            "hint_lines": [
+                "from starkware.python.math_utils import div_mod",
+                "",
+                "value = x_inv = div_mod(1, x, SECP_P)"
+            ]
+        },
+        {
+            "allowed_expressions": [],
+            "hint_lines": [
+                "from starkware.cairo.common.cairo_secp.secp_utils import pack",
+                "from starkware.python.math_utils import div_mod, safe_div",
+                "",
+                "a = pack(ids.a, PRIME)",
+                "b = pack(ids.b, PRIME)",
+                "value = res = div_mod(a, b, N)"
+            ]
+        },
+        {
+            "allowed_expressions": [],
+            "hint_lines": [
+                "value = k_plus_one = safe_div(res * b - a, N) + 1"
+            ]
+        },
+        {
+            "allowed_expressions": [],
+            "hint_lines": [
+                "from starkware.cairo.common.cairo_secp.secp_utils import pack",
+                "",
+                "q, r = divmod(pack(ids.val, PRIME), SECP_P)",
+                "assert r == 0, f\"verify_zero: Invalid input {ids.val.d0, ids.val.d1, ids.val.d2}.\"",
+                "ids.q = q % PRIME"
+            ]
+        },
+        {
+            "allowed_expressions": [],
+            "hint_lines": [
+                "from starkware.cairo.common.cairo_secp.secp_utils import pack",
+                "",
+                "slope = pack(ids.slope, PRIME)",
+                "x = pack(ids.point.x, PRIME)",
+                "y = pack(ids.point.y, PRIME)",
+                "",
+                "value = new_x = (pow(slope, 2, SECP_P) - 2 * x) % SECP_P"
+            ]
+        },
         {
             "allowed_expressions": [],
             "hint_lines": [
